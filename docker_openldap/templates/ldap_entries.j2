{# Organizational Units (OUs) are created to structure Groups and Users. This cannot be changed. #}
organizational_ldapentries:
{% for ou in (ldap_schema | dict2items) %}
  - dn: "ou={{ ou.key }},{{ base_dn }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: {{ ou.key }}
    state: present
{% endfor %}
{%- for ou in (ldap_schema | dict2items) %}
{%- for subou in (ldap_schema | json_query(ou.key) | dict2items) %}
  - dn: "ou={{ subou.key }},ou={{ ou.key }},{{ base_dn }}"
    objectClass:
      - top
      - organizationalUnit
    attributes:
      ou: {{ subou.key }}
    state: present
{% endfor %}
{%- endfor %}
{# Groups are created for permission purposes. A user can join or leave a group. This can be changed. #}
{# The user does not need to exist. A generic 'testuser' is used to initialize the group's creation #}
groups_ldapentries:
{% for ou in (ldap_schema | dict2items) %}
{%- for subou in (ldap_schema | json_query(ou.key) | dict2items) %}
{%- for commonname in subou.value %}
  - dn: "cn={{ commonname }},ou={{ subou.key }},ou={{ ou.key }},{{ base_dn }}"
    objectClass:
      - top
      - groupOfUniqueNames
    attributes:
      cn: {{ commonname }}
      uniqueMember:
        - {{ ldap_default_user }}
{% for user in vault_users | dict2items %}
{% if user.value.ldap_branch is defined %}
{% if user.value.ldap_branch == commonname %}
        - "uid={{ user.value.create_username | default(user.value.name) }},cn={{ commonname }},ou={{ subou.key }},ou={{ ou.key }},{{ base_dn }}"
{% endif %}
{% endif %}
{% endfor %}
    state: present
{% endfor %}
{%- endfor %}
{%- endfor %}
{# User objects are created to hold all the data required for user creation. Their DN's are unique. #}
users_ldapentries:
{% for ou in (ldap_schema | dict2items) %}
{%- for subou in (ldap_schema | json_query(ou.key) | dict2items) %}
{% for user in vault_users | dict2items %}
{% if user.value.ldap_branch is defined %}
{% if user.value.ldap_branch == subou.key %}
  - dn: "uid={{ user.value.create_username | default(user.value.name) }},ou={{ subou.key }},ou={{ ou.key }},{{ base_dn }}"
    objectClass:
      - inetOrgPerson
      - posixAccount
      - shadowAccount
    attributes:
      cn: {{ user.value.create_username | default(user.value.name) }}
      sn: {{ user.value.create_username | default(user.value.name) }}
      uid: {{ user.value.create_username | default(user.value.name) }}
      uidNumber: {{ user.value.uid }}
      gidNumber: {{ user.value.uid }}
      homeDirectory: "/home/{{ user.value.create_username | default(user.value.name) }}"
      loginShell: "/bin/bash"
      userPassword: {{ user.value.ldap_password | default('default_password') }}
    state: {{ user.value.state }}
    ldap_groups: {{ user.value.ldap_groups }}
{% endif %}
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}
{# MAB Devices #}
{% for host in groups['ldap_entry'] %}
{% if hostvars[host].mac_address is defined %}
  - dn: "uid={{ hostvars[host].mac_address | ansible.utils.hwaddr('bare') | lower }},ou=devices,ou=immersiveSimulation,dc=lab,dc=orc"
    objectClass:
      - top
      - person
      - organizationalPerson
      - inetOrgPerson
    attributes:
      cn: "{{ host }}"
      sn: "{{ hostvars[host].mac_address | ansible.utils.hwaddr('bare') | lower }}"
      uid: "{{ hostvars[host].mac_address | ansible.utils.hwaddr('bare') | lower }}"
      userPassword: {{ hostvars[host].mac_address | ansible.utils.hwaddr('bare') | lower }}
    state: present
    ldap_groups: [{{ mab_device_vlan }}]
{% endif %}
{% endfor %}
